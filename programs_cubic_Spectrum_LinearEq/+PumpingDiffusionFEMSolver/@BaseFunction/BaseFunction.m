classdef BaseFunction < handle
    %BaseFunction  The super calss of all base function class.
    %  All base function should be real valued functions defined on [-1,1]. 
    %  (f,g) denotes the inner product of function f(x) and g(x) on [-1,1]
    
    properties(SetAccess=protected)
        basisName;
    end
    
    properties(SetAccess=protected)
        maxOrder=100;   % the max order of basis function that will be used by phiphi(), phidphi() and dphidphi() method. 
                        % Set by numbering() method.
        meshPars=0;     % the parameter for the mesh that is related to the current getNoByIxyz.
        
        %-------------------------------------------------
        % Get the global No. of a basis by its sub index ix,iy,iz and Domain ID. No=getNoByIxyz(ix,iy,iz,Did);
        % Generated by numbering() method.
        getNoByIxyz;    
        No2fun;         
        fun2No;
        Nbasis;
        %-------------------------------------------------
    end
    
    methods(Abstract,Static)
        val=funVal(xList,i); % return v_i(xList). i and xList are vectors. i should be positive integers.
        % If xList is a row vector, then val is a [length(i) x length(xList)] matrix.
        % If xList is a column vector, then val is a [length(xList) x length(i)] matrix.
        val=funFirstDerivative(xList,i) % return v_i'(xList). Input/Output format is the same as funVal() method.
    end
    
    methods(Abstract)
        val=phiphi(obj,i,k,h);   % return the inner product (v_i ,v_k ) in an interval with length h. 
        val=phidphi(obj,i,k);    % return the inner product (v_i ,v_k'). Here v_i, v_k represents the single axis base function.
        val=dphidphi(obj,i,k,h); % return the inner product (v_i',v_k') in an interval with length h
    end
    
    methods
        M=innerProduct(obj,weightFun,maxOrder,ngp);  % M is a [maxOrder x maxOrder] matrix with M_ik=(v_i,weightFun*v_k)
        vecF=projection(obj,fun,maxOrder,ngp);       % vecF is a [maxOrder x 1] column vector with vecF_i=(v_i,fun)
        % weightFun and fun should be function handles with only one input argument
        % Input argument 'ngp' is optional. It tell the method how many gauss point should be used to calc numerical intergrals.
        % If ngp is not given, the default value is ngp=2*maxOrder+100 for innerProduct() and ngp=maxOrder+100 for projection().
        % Example for using:
        % projection(@(x)funFileName(a,b,c,x),  K)
        
        %----------------------------------------------------------------------------------------------------------
        Nbasis=numbering(obj,mesh,maxOrder);  % Generate the global No. of each base for a given @Mesh3D object.
        % maxOrder should be at least 2.
        % Assume that v_1(-1)~=0, v_1(1)==0;  v_2(-1)==0, v_2(1)~=0;  v_i(+-1)==0 for i>2
        % Without this assumption, the numbering is wrong, consider overload this method in that case.
        % Nbasis is the total number of basis. The numbering result is stored in property getNoByIxyz, No2fun and fun2No.
    end
    
    methods(Access=protected,Sealed,Hidden,Static)
        [ gp_x, gw ] = getGaussPts( ngp );  % gp_x: column vector containing the gauss points
                                            % gw:   column vector containing the weights
    end
    
end

